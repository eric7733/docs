[
{
	"uri": "https://halalchain.github.io/docs/en/intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Bitcoin and Blockchain Bitcoin was born with revolution, and it opened a new world that currency issuance becomes open and fair by a cryptography-based decentralized payment network. With the arrival of 10-years birth of bitcoin, the blockchain infrastructure is facing various challenges from technical aspects. The underlying mechanism of Bitcoin, the blockchain, was found capable of playing a significant role in the financial field.\na blockchain is an immutable transaction database, which maintained by peer nodes which communicated with each other within a Peer-to-Peer distributed network. For each peer, which validate and apply transactions according to a consensus protocol. The transcations grouped into blocks that linked by a hash from one block to the preceding block, aka the chain of block which is the name of blockchain is comming from.\nQitmeer BlockDAG Qitmeer regards openness,fairness, fault tolerance, scalability as the core metrics to assess a promising blockchain paradigm, and a blockchain system achieved a desirable balance among these metrics is regarded as Classical Blockchain Setting.\nQitmeer use SPECTRE as its fundamental Consensus protocol. SPECTRE is a fast-confirmation and high-throughput BlockDAG protocol(Directed Acyclic Graph of blocks, a blockDAG), which guarantees high performance in a payment network. Additionally, Qitmeer introduces another high-throughput BlockDAG protocol GhostDAG, which is highlighted on unprecedentedly supporting transactions linearly ordering, to circumvent SPECTRE\u0026rsquo;s weak liveness and provide ordering service for the fair scheme of the reward system.\nQitmeer POW Qitmeer Consensus is compliant with Classical Blockchain Setting - it could enter and leave network freely by Proof-of-Work, and the collaboration model of DAG ledger guarantees that miners gain rewards consistent with their devotion, 50\\% faulty tolerance as secure as bitcoin, robust scalability that is only subject to physical network limit. The mining algorithm is also a vital source of fairness other than consensus algorithm per se. Cuckoo Ring is a graph theory based proof-of-work mining algorithm and is practically ASIC resistant due to memory-hard calculation.\nQitmeer token \u0026amp; Isamlic financial ecosystem Qitmeer originates a UTXO-based unique token insurance scheme, which has effectively answered two main concerns: Intrinsic Value and Assets Authentication. Issuing a certain amount of assets must consume a certain amount of the native currency; moreover, entities must be warranted a license to issue assets.\nQitmeer devises a family of specifications and protocols to embrace the whole Isamlic financial ecosystem, such as wallet and miners. As for interoperability, Qitmeer calls for utilizing cross-chain protocols to integrate various cryptocurrencies and offer reliable off-chain smart contract services.\n"
},
{
	"uri": "https://halalchain.github.io/docs/en/getstart/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://halalchain.github.io/docs/en/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "",
	"content": " Qitmeer Tutorials List  Qitmeer Tesing Guide: Step-by-Step Guide by Using Docker Image  "
},
{
	"uri": "https://halalchain.github.io/docs/en/qxtools/",
	"title": "Qx Tools",
	"tags": [],
	"description": "",
	"content": " Qx user guide Qx is a command-line tool that provides a variety of commands for key management and transaction construction, such as random \u0026ldquo;seed\u0026rdquo; generation, public/private key encoding etc. qx cab be built and distributed as a single file binary, which works like the swiss army knife of qitmeer.\nPlease see more details at https://github.com/HalalChain/qx\nPrerequisites Update Go to version at least 1.12 (required \u0026gt;= 1.12)\nCheck your golang version\n~ go version go version go1.12 darwin/amd64  How to build ~ mkdir -p /tmp/work ~ cd /tmp/work ~ git clone https://github.com/HalalChain/qx.git ~ cd qx ~ go build ~ ./qx --version Qx Version : \u0026quot;0.0.1\u0026quot;  qx Commands ~ qx Usage: qx [--version] [--help] \u0026lt;command\u0026gt; [\u0026lt;args\u0026gt;] encode and decode : base58-encode encode a base16 string to a base58 string base58-decode decode a base58 string to a base16 string base58check-encode encode a base58check string base58check-decode decode a base58check string base64-encode encode a base16 string to a base64 string base64-encode encode a base64 string to a base16 string rlp-encode encode a string to a rlp encoded base16 string rlp-decode decode a rlp base16 string to a human-readble representation hash : blake2b256 calculate Blake2b 256 hash of a base16 data. blake2b512 calculate Blake2b 512 hash of a base16 data. sha256 calculate SHA256 hash of a base16 data. sha3-256 calculate SHA3 256 hash of a base16 data. keccak-256 calculate legacy keccak 256 hash of a bash16 data. blake256 calculate blake256 hash of a base16 data. ripemd160 calculate ripemd160 hash of a base16 data. bitcion160 calculate ripemd160(sha256(data)) hash160 calculate ripemd160(blake2b256(data)) entropy (seed) \u0026amp; mnemoic \u0026amp; hd \u0026amp; ec entropy generate a cryptographically secure pseudorandom entropy (seed) hd-new create a new HD(BIP32) private key from an entropy (seed) hd-to-ec convert the HD (BIP32) format private/public key to a EC private/public key hd-to-public derive the HD (BIP32) public key from a HD private key hd-decode decode a HD (BIP32) private/public key serialization format hd-derive Derive a child HD (BIP32) key from another HD public or private key. mnemonic-new create a mnemonic world-list (BIP39) from an entropy mnemonic-to-entropy return back to the entropy (the random seed) from a mnemonic world list (BIP39) mnemonic-to-seed convert a mnemonic world-list (BIP39) to its 512 bits seed ec-new create a new EC private key from an entropy (seed). ec-to-public derive the EC public key from an EC private key (the compressed format by default ) ec-to-wif convert an EC private key to a WIF, associates with the compressed public key by default. wif-to-ec convert a WIF private key to an EC private key. wif-to-public derive the EC public key from a WIF private key. addr \u0026amp; tx \u0026amp; sign ec-to-addr convert an EC public key to a paymant address. default is nox address tx-encode encode a unsigned transaction. tx-decode decode a transaction in base16 to json format. tx-sign sign a transactions using a private key. msg-sign create a message signature msg-verify validate a message signature signature-decode decode a ECDSA signature  Encoding Commands Encode/Decocde Qitmeer address \u0026amp; private/pubkey\nbase58-encode  encode a base16 string to a base58 string  Example ~ qx base58-decode RmCYoUMqKZopUkai2YhUFHR9UeqjeyjTAgW  # base16 string 0df144d959afb6db4ad730a6e2c0daf46ceeb98c53a059cd6527  base58-decode  decode a base58 string to a base16 string  Example ~ qx base58-decode 1234567890abcdef  # base58 string 43c9JGZmRvE  base58check-encode  base16 string into Qitmeer or BTC address.\n~ qx base58check-encode Usage: qx base58check-encode [-v \u0026lt;ver\u0026gt;] [hexstring] -a string base58check hasher -c int base58check checksum size (default 4) -v version base58check version [mainnet|testnet|privnet|btcmainnet|btctestnet|btcregressionnet] (default privnet)   Example # create qitmeer privnet address by base16 ~ qx base58check-encode c1c3092d17c917c2799c041aeaeac18822772149 # base58 string RmPwHCuC2m6gvz9TnVLapHySk1ZU72FTSru  # create btc testnet address by base16 ~ qx base58check-encode -v btctestnet c1c3092d17c917c2799c041aeaeac18822772149 # base58 string myBUMQTmZGK8yKLDranjSQEHbCYCaaywQD  "
},
{
	"uri": "https://halalchain.github.io/docs/en/qitmeer-cli/",
	"title": "Qitmeer-cli",
	"tags": [],
	"description": "",
	"content": " Qitmeer-cli user guide qitmeer-cli is a command-line tool that allows you to send RPC commands to the qitmeer network from the command line.\nPrerequisites Update Go to version at least 1.12 (required \u0026gt;= 1.12)\nCheck your golang version\n$ go version go version go1.12 darwin/amd64  How to build $ mkdir -p /tmp/work $ cd /tmp/work $ git clone https://github.com/HalalChain/qitmeer-cli.git $ go build  Qitmeer Commands $ ./qitmeer-cli help qitmeer cli is a RPC tool for the qitmeer network Usage: qitmeer-cli [command] Available Commands: createrawtransaction createRawTransaction decoderawtransaction decodeRawTransaction generate generate {n}, cpu mine n blocks getUtxo getUtxo tx_hash vout include_mempool, getblock get block by number or hash getblockcount get block count getblockhash get block hash by number getblocktemplate getblocktemplate getmempool get mempool getrawtransaction getrawtransaction help Help about any command sendrawtransaction sendRawTransaction txSign txSign private_key raw_tx Flags: --c string RPC server certificate file path --conf string RPC username (default \u0026quot;config.toml\u0026quot;) -h, --help help for qitmeer-cli --notls Do not verify tls certificates (not recommended!) (default true) -P, --password string RPC password --proxy string Connect via SOCKS5 proxy (eg. 127.0.0.1:9050) --proxypass string Password for proxy server --proxyuser string Username for proxy server -s, --server string RPC server to connect to (default \u0026quot;127.0.0.1:18131\u0026quot;) --simnet Connect to the simulation test network --skipverify Do not verify tls certificates (not recommended!) (default true) --testnet Connect to testnet -u, --user string RPC username Use \u0026quot;qitmeer-cli [command] --help\u0026quot; for more information about a command.  "
},
{
	"uri": "https://halalchain.github.io/docs/en/faqs/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://halalchain.github.io/docs/en/glossary/",
	"title": "Glossary",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://halalchain.github.io/docs/en/tutorials/qitmeer-docker-test/",
	"title": "Qitmeer Testing Guide",
	"tags": [],
	"description": "",
	"content": " Testing Qitmeer Using Docker Image Here is the step by step guide to show to how setup the testing Qitmeer network by using the Qitmeer docker image.\nPrerequisites Before we go with the experiment, we need to ensure the system and qitmeer suite are ready. Since the following experiment pertains two nodes, so we need to perform theses steps on each node.\nSystem Hardware and OS  Memory: \u0026gt;= 2G Storage: \u0026gt;= 10G OS: \u0026gt;= Ubuntu 16.04 Network: \u0026gt;= 2M b/s bandwidth, with PUBLIC IP  Note: currently, Qitmeer\u0026rsquo;s seeder is not open-sourced and the nodes need to connect with each other directly, thus PUBLIC IP is an obligation. Late on, once seeder is ready, this requirement will be removed.\nGolang Most of Qitmeer Suite are golang projects and using go modules.\nsudo add-apt-repository ppa:longsleep/golang-backports sudo apt-get update sudo apt-get install golang-go  Docker Install docker on ubuntu:\nsudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \\ \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\u0026quot; sudo apt-get update sudo apt-get install docker-ce  If you are already a root user, you can ignore next step\n# Add docker user group and add the logged-in user to the docker user group. sudo groupadd docker sudo gpasswd -a $USER docker newgrp docker docker ps  You can use docker -v to test whether the installation is successful or not. Other systems platforms are similar.You can go docker\nQitmeer Suite Qitmeer Suite consists of qitmeer Docker, qx, cli\nQitmeer Docker image  Installation\ndocker pull halalchain/qitmeer  Usage\ndocker run -it -p 18130:18130 -p 18131:18131 halalchain/qitmeer --miningaddr=[Your mining address] --addpeer=[peer1 IP:PORT] [--addpeer=[peer2 IP:PORT]] --httpmodules=miner --httpmodules=nox     Field Explain     -p 18130:18130 P2P port mapping, used for nodes to communicate with each other   -p 18131:18131 PRC port mapping, used for clients to call services remotely   miningaddr Miner account address   debuglevel Logging level {trace, debug, info, warn, error, critical}   addpeer Add a peer to connect with at startup   generate Generate (mine) coins using the CPU   connect Connect only to the specified peers at startup   httpmodules It is a list of API modules to expose via the HTTP RPC interface. (Current valid values:nox,miner)     Qitmeer-cli qitmeer cli is a RPC tool for the qitmeer network\n Installation\ngit clone https://github.com/HalalChain/qitmeer-cli ~/github.com/HalalChain/qitmeer-cli cd ~/github.com/HalalChain/qitmeer-cli go build ./qitmeer-cli  Usage\nqitmeer cli is a RPC tool for the qitmeer network Usage: qitmeer-cli [command] Available Commands: createrawtransaction createRawTransaction decoderawtransaction decodeRawTransaction generate generate {n}, cpu mine n blocks getUtxo getUtxo tx_hash vout include_mempool, getblock get block by number or hash getblockcount get block count getblockhash get block hash by number getblocktemplate getblocktemplate getmempool get mempool getrawtransaction getrawtransaction help Help about any command sendrawtransaction sendRawTransaction txSign txSign private_key raw_tx Flags: --cert string RPC server certificate file path -c, --config string config file path (default \u0026quot;config.toml\u0026quot;) --debug debug print log -h, --help help for qitmeer-cli --notls Do not verify tls certificates (not recommended!) (default true) -P, --password string RPC password --proxy string Connect via SOCKS5 proxy (eg. 127.0.0.1:9050) --proxypass string Password for proxy server --proxyuser string Username for proxy server -s, --server string RPC server to connect to (default \u0026quot;127.0.0.1:18131\u0026quot;) --simnet Connect to the simulation test network --skipverify Do not verify tls certificates (not recommended!) (default true) --testnet Connect to testnet --timeout string rpc timeout,s:second h:hour m:minute (default \u0026quot;30s\u0026quot;) -u, --user string RPC username Use \u0026quot;qitmeer-cli [command] --help\u0026quot; for more information about a command.   qx tool qx is a command-line tool that provides a variety of commands for key management and transaction construction.\n Installation\ngit clone https://github.com/HalalChain/qx ~/github.com/HalalChain/qx cd ~/github.com/HalalChain/qx go build alias qx=~/github.com/HalalChain/qx/qx qx  Usage\nUsage: qx [--version] [--help] \u0026lt;command\u0026gt; [\u0026lt;args\u0026gt;] encode and decode : base58-encode encode a base16 string to a base58 string base58-decode decode a base58 string to a base16 string base58check-encode encode a base58check string base58check-decode decode a base58check string base64-encode encode a base16 string to a base64 string base64-encode encode a base64 string to a base16 string rlp-encode encode a string to a rlp encoded base16 string rlp-decode decode a rlp base16 string to a human-readble representation hash : blake2b256 calculate Blake2b 256 hash of a base16 data. blake2b512 calculate Blake2b 512 hash of a base16 data. sha256 calculate SHA256 hash of a base16 data. sha3-256 calculate SHA3 256 hash of a base16 data. keccak-256 calculate legacy keccak 256 hash of a bash16 data. blake256 calculate blake256 hash of a base16 data. ripemd160 calculate ripemd160 hash of a base16 data. bitcion160 calculate ripemd160(sha256(data)) hash160 calculate ripemd160(blake2b256(data)) entropy (seed) \u0026amp; mnemoic \u0026amp; hd \u0026amp; ec entropy generate a cryptographically secure pseudorandom entropy (seed) hd-new create a new HD(BIP32) private key from an entropy (seed) hd-to-ec convert the HD (BIP32) format private/public key to a EC private/public key hd-to-public derive the HD (BIP32) public key from a HD private key hd-decode decode a HD (BIP32) private/public key serialization format hd-derive Derive a child HD (BIP32) key from another HD public or private key. mnemonic-new create a mnemonic world-list (BIP39) from an entropy mnemonic-to-entropy return back to the entropy (the random seed) from a mnemonic world list (BIP39) mnemonic-to-seed convert a mnemonic world-list (BIP39) to its 512 bits seed ec-new create a new EC private key from an entropy (seed). ec-to-public derive the EC public key from an EC private key (the compressed format by default ) ec-to-wif convert an EC private key to a WIF, associates with the compressed public key by default. wif-to-ec convert a WIF private key to an EC private key. wif-to-public derive the EC public key from a WIF private key. addr \u0026amp; tx \u0026amp; sign ec-to-addr convert an EC public key to a paymant address. default is nox address tx-encode encode a unsigned transaction. tx-decode decode a transaction in base16 to json format. tx-sign sign a transactions using a private key. msg-sign create a message signature msg-verify validate a message signature signature-decode decode a ECDSA signature   Step-by-Step Guide This experiment demostrates a typical transfer process. The network consists of two nodes, a miner and a recipient. The miner mines a block and receives mining rewards; then he will transfer 2 Qitmeer Coins to the recipient.\nRecipient Node This node is playing the role of transfer recipient, it starts with a normal full node setting, that\u0026rsquo;s to say that it has no mining functionality.\nLaunch docker run -it -p 18130:18130 halalchain/qitmeer  Generate Recipient Address qx ec-new $(qx entropy) \u0026gt; ~/recipient_key.txt qx ec-to-addr $(qx ec-to-public $(cat ~/recipient_key.txt)) \u0026gt; ~/recipient_address.txt  Save IP address curl ipinfo.io/ip \u0026gt; ~/recipient_ip.txt  Share recpient\u0026rsquo;s address and IP Share recipient_address.txt and recipient_ip.txt with the miner.\nMiner Node This node is playing the role of miner and transfer originator, it starts with a full miner setting .\nGenerate Minning address qx ec-new $(qx entropy) \u0026gt; ~/miner_key.txt qx ec-to-addr $(qx ec-to-public $(cat ~/miner_key.txt)) \u0026gt; ~/miner_address.txt  Launch Node alias qitmeer=\u0026quot;docker run -it -p 18130:18130 -p 18131:18131 halalchain/qitmeer\u0026quot; qitmeer --miningaddr=$(cat ~/miner_address.txt) --addpeer=$(cat ~/recipient_ip.txt):18130 --httpmodules=miner --httpmodules=nox --testnet --rpcuser=test --rpcpass=test --generate  Now observe the log of Node Recipient, if the connection is OK, a new log like following should display\n2019-07-06|00:20:45.627 [INFO ] New valid peer module=blockchain peer=\u0026quot;IP_OF_MINER:53962 (inbound)\u0026quot; user-agent=/noxd:0.0.1/nox:0.3.0/ Qitmeer's RPC is encrypted, to call RPC service, you should obtain the RPC certificate first; also, the working home of cli must be changed to where it is located.  cd ~/github.com/HalalChain/qitmeer-cli/ docker cp $(docker ps -q --filter ancestor=halalchain/qitmeer):/qitmeer/rpc.cert ~/ alias cli=\u0026quot;./qitmeer-cli --notls=false --password=test --skipverify=false --testnet=true --user=test --cert=$HOME/rpc.cert --server=127.0.0.1:18131\u0026quot;  Generate Block watch the log window until we find a new block is mining and the log would be like:\n2019-07-06|04:23:36.760 [INFO ] Block submitted accepted module=\u0026quot;cpu miner\u0026quot; hash=BLOCK_HASH height=BLOCK_HEIGHT amount=2500000000 why [MINER_ADDRESS], 1  In this case, BLOCK_HASH is 00000012524082d9144908e28eddb9e8a971c1b220b5301afa3e4f1597413294 and BLOCK_HEIGHT is 1000\nGet UTXO  cli getblock BLOCK_HASH |jq '.transactions[0].vout'  [ { \u0026quot;amount\u0026quot;: 250000000, \u0026quot;scriptPubKey\u0026quot;: { \u0026quot;asm\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;nonstandard\u0026quot; } }, { \u0026quot;amount\u0026quot;: 0, \u0026quot;scriptPubKey\u0026quot;: { \u0026quot;asm\u0026quot;: \u0026quot;OP_RETURN e803000067e7a740bf8fdd3a\u0026quot;, \u0026quot;hex\u0026quot;: \u0026quot;6a0ce803000067e7a740bf8fdd3a\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;nulldata\u0026quot; } }, { \u0026quot;amount\u0026quot;: 2250000000, \u0026quot;scriptPubKey\u0026quot;: { \u0026quot;asm\u0026quot;: \u0026quot;OP_DUP OP_HASH160 f3f61ce15d8b686f2b29d268a901b9d8beef3d3a OP_EQUALVERIFY OP_CHECKSIG\u0026quot;, \u0026quot;hex\u0026quot;: \u0026quot;76a914f3f61ce15d8b686f2b29d268a901b9d8beef3d3a88ac\u0026quot;, \u0026quot;reqSigs\u0026quot;: 1, \u0026quot;type\u0026quot;: \u0026quot;pubkeyhash\u0026quot;, \u0026quot;addresses\u0026quot;: [ \u0026quot;TmmC2jmGKUbnhjjhBtRFfJ7m2tRPVvoaXnM\u0026quot; ] } } ]  From the result, we could get the index and the amount of the UTXO, in this case it is the third UTXO, so the index is 2.; besides, we could know the miner reward is 22.5 Qitmeer Coin (2250000000).\nGet coinbase transaction ID cli getblock BLOCK_HASH |jq '.transactions[0].txid'| tr -d '\u0026quot;' \u0026gt; ~/tx_id.txt  Transaction maturity A coinbase transaction can be spent only with at least 16 blocks confirmation. From the the log, we know that the transacation is created at block height 1000, so we wait until the block height is greater than 1016.\ncli getblockcount  1017  Note: this operation may be slow because this is CPU mining, anyway, Qitmeer GPU Miner will be ready soon and will make this process really fast.\nCurrently the miner node has enabled auto mining by adding --generate parameter. If we remove it, the node will retuen to the default manual mining mode. So we can control how many blocks to be mined accurately, for example:\n# this command may be slow, please increate timeout if got timeout error cli --timeout=9m generate 16  Build Transaction Qitmeer doesn\u0026rsquo;t accept zero fee transaction to prevent sybli-attack, so we send 2 coins to the reciepient and 2 coins back to the miner as change, leaving the 0.5 difference as the miner fee.\n# Usage: qitmeer-cli createrawtransaction {inTxid:vout}... {toAddr:amount}... [flags] cli createrawtransaction $(cat ~/tx_id.txt):2 $(cat ~/recipient_address.txt):2 $(cat ~/miner_address.txt):20 | tr -d '\u0026quot;'\u0026gt; ~/raw_tx.txt  Sign Transaction # Usage: qitmeer-cli txSign {private_key} {raw_tx} [flags] cli txSign $(cat ~/miner_key.txt) $(cat ~/raw_tx.txt) | tr -d '\u0026quot;' \u0026gt; ~/signed_tx.txt  Send Transcation # Usage: qitmeer-cli sendrawtransaction {raw_tx} {allow_high_fee bool,defalut false} [flags] cli sendRawTransaction $(cat ~/signed_tx.txt) true \u0026quot;12844dbc6b829ee021a9a9772c97efbb4afd410698775363be95786c39585bfc\u0026quot;  Verify Transcation Wait for the coming block generated, then check if this transaction is packed inside. It is a unspent transaction, so we should find its UTXO.\ncli getUtxo 12844dbc6b829ee021a9a9772c97efbb4afd410698775363be95786c39585bfc 0 |jq  { \u0026quot;bestblock\u0026quot;: \u0026quot;0000000f9cfb63585fcce7df4e10ead67f27ae330d61643d640916fff5e3fe3b\u0026quot;, \u0026quot;confirmations\u0026quot;: 9, \u0026quot;amount\u0026quot;: 20, \u0026quot;scriptPubKey\u0026quot;: { \u0026quot;asm\u0026quot;: \u0026quot;OP_DUP OP_HASH160 f3f61ce15d8b686f2b29d268a901b9d8beef3d3a OP_EQUALVERIFY OP_CHECKSIG\u0026quot;, \u0026quot;hex\u0026quot;: \u0026quot;76a914f3f61ce15d8b686f2b29d268a901b9d8beef3d3a88ac\u0026quot;, \u0026quot;reqSigs\u0026quot;: 1, \u0026quot;type\u0026quot;: \u0026quot;pubkeyhash\u0026quot;, \u0026quot;addresses\u0026quot;: [ \u0026quot;TmmC2jmGKUbnhjjhBtRFfJ7m2tRPVvoaXnM\u0026quot; ] }, \u0026quot;version\u0026quot;: 1, \u0026quot;coinbase\u0026quot;: false }  The UXTO is found, thus this transfer is done succesfully.\n"
},
{
	"uri": "https://halalchain.github.io/docs/en/test/",
	"title": "Test fonts and syntax highlight",
	"tags": [],
	"description": "",
	"content": " To be, or not to be, Ay there's the point, To Die, to sleep, is that all? Aye all: No, to sleep, to dream, aye marry there it goes, For in that dream of death, when we awake, And borne before an everlasting Judge, From whence no passenger ever returned, The undiscovered country, at whose sight The happy smile, and the accursed damn'd. But for this, the joyful hope of this, Who'd bear the scorns and flattery of the world, Scorned by the right rich, the rich cursed of the poor? The widow being oppressed, the orphan wrong'd, The taste of hunger, or a tyrants reign, And thousand more calamities besides, To grunt and sweat under this weary life, When that he may his full Quietus make, With a bare bodkin, who would this endure, But for a hope of something after death? Which puzzles the brain, and doth confound the sense, Which makes us rather bear those evils we have, Than fly to others that we know not of. Aye that, O this conscience makes cowards of us all, Lady in thy orizons, be all my sins remembered.\n \u0026quot;To be, or not to be\u0026quot; is one of the most widely known and quoted lines in modern English, and the soliloquy has been referenced in innumerable works of theatre, literature and music.\n 春眠不觉晓，处处闻啼鸟。 夜来风雨声，花落知多少。\n 春眠不觉晓，处处闻啼鸟。 夜来风雨声，花落知多少。\n移舟泊烟渚#  日暮客愁新## 野旷天低树## 江清月近人## 江清月近人##  独上高楼望尽天涯路。 衣带渐宽终不悔，为伊消得人憔悴。 众里寻他千百度，暮然回首，那人正在灯火阑珊处。   昔我往矣，杨柳依依。今我来思，雨雪霏霏。 蒹葭（jiān jiā）苍苍，白露为霜。 所谓伊人，在水一方。 彼采葛兮，一日不见，如三月兮。彼采萧兮，一日不见，如三秋兮。彼采艾兮，一日不见，如三岁兮。  Test for headline h1 The quick brown fox jumps over the lazy dog\nTest for headline h2 The quick brown fox jumps over the lazy dog\nTest for headline h3 The quick brown fox jumps over the lazy dog\nTest for headline h4 The quick brown fox jumps over the lazy dog\nTest for headline h5 The quick brown fox jumps over the lazy dog\nTest for Text highlight Note: github don't support ==hightlight== markdown. we need to use a html 5 \u0026lt;mark\u0026gt;\n 彼采葛兮，一日不见，如三月兮。 彼采萧兮，一日不见，如三秋兮。 彼采艾兮，一日不见，如三岁兮。  Test for picture  open Keynote or Pages (instructions same after this point) Select a template. The background does not matter but white shows your work better Drag or paste in your screenshot. Note: Using control+⌘+shift+4 you can send your screenshot directly to the clipboard. Apply a drop shadow to your image Select and copy just the image and paste it into your email or desired location.  \nStackexchange Question : Screenshot of selected area with shadow\nAdd Shadow by using script #!/bin/bash convert \u0026quot;$1\u0026quot; -trim \\( +clone -background grey25 -shadow 80x40+5+30 \\) +swap -background transparent -layers merge +repage \u0026quot;$1-shadow.png\u0026quot;  The best thing is transparent drop shadow around the window without the white border.\nThe script from here\nYou might need to brew install imagemagick before using it.\n fig.1 - Before adding the shadow\n fig.2 - 阴影效果添加之后\nCreate favicon.ico convert favicon.png -define icon:auto-resize=64,48,32,16 favicon.ico  The code form here\nTest syntax highlighting go pckage main import ( \u0026quot;fmt\u0026quot; \u0026quot;time\u0026quot; ) func readword(ch chan string) { fmt.Println(\u0026quot;Type a word, then hit Enter.\u0026quot;) var word string fmt.Scanf(\u0026quot;%s\u0026quot;, \u0026amp;word) ch \u0026lt;- word } func timeout(t chan bool) { time.Sleep(5 * time.Second) t \u0026lt;- true } func main() { t := make(chan bool) go timeout(t) ch := make(chan string) go readword(ch) select { case word := \u0026lt;-ch: fmt.Println(\u0026quot;Received\u0026quot;, word) case \u0026lt;-t: fmt.Println(\u0026quot;Timeout.\u0026quot;) } }  Bash [ -r ~/.profile ] \u0026amp;\u0026amp; . ~/.profile # set up environment, once, Bourne-sh syntax only if [ -n \u0026quot;$PS1\u0026quot; ] ; then # are we interactive? [ -r ~/.bashrc ] \u0026amp;\u0026amp; . ~/.bashrc # tty/prompt/function setup for interactive shells [ -r ~/.bash_login ] \u0026amp;\u0026amp; . ~/.bash_login # any at-login tasks for login shell only fi # End of \u0026quot;if\u0026quot; block  JavaScript var counter = (function () { var i = 0; // private property return { // public methods get: function () { alert(i); }, set: function (value) { i = value; }, increment: function () { alert(++i); } }; })(); // module counter.get(); // shows 0 counter.set(6); counter.increment(); // shows 7 counter.increment(); // shows 8  HTML \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;MathJax TeX Test Page\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026quot;text/x-mathjax-config\u0026quot;\u0026gt; MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}}); \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; async src=\u0026quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_CHTML\u0026quot;\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; When $a \\ne 0$, there are two solutions to \\(ax^2 + bx + c = 0\\) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Scala var correct = 0 var questions = 0 var heads = 0 var trials = 10000 // Let's run some trials (1 to trials).foreach { trial =\u0026gt; // toss a fair coin scala.util.Random.nextBoolean() match { case true =\u0026gt; // Heads was tossed. Wake on Monday. // Sleeping Beauty always bet Heads was tossed; // ... in this case, only once. questions += 1 correct += 1 heads += 1 case _ =\u0026gt; // Tails was tossed. Wake on Monday and Tuesday. // Sleeping Beauty always bet Heads was tossed; // ... in this case, it will bet both on Monday // and Tuesday. But it will fail! questions += 2 } } println(\u0026quot;Probability of SB being correct: \u0026quot; + correct.toDouble/questions) println(\u0026quot;Probability of Heads being tossed: \u0026quot; + heads.toDouble/trials)  Here's a sample run:\nProbability of SB being correct: 0.33636242148870776 Probability of Heads being tossed: 0.5034  Test for Tables    Lex noation Set Theory Symbols 概念     \\mid \\( \\mid \\)    \\lbrace \\( \\lbrace \\rbrace \\) 也能用\\{\\}   \\in \\( a \\in A \\) a属于A element of   \\notin \\( a \\notin A \\) 不属于   \\ni \\( \\ni \\) 也能用\\owns   \\varnothing \\( \\varnothing \\) 空集   \\subset \\( A \\subset B \\) A是B的子集   \\subseteq \\( A \\subseteq B \\) A是B的子集（一般用这个）   \\subsetneq \\( A \\subsetneq B \\) A是B的真子集 proper subset   \\supset \\( B \\supset A \\) B包含A   \\supseteq \\( B \\supseteq A \\) B包含A（一般用这个）include   \\supsetneq \\( B \\supsetneq A \\) B真包含A   \\cap \\( A \\cap B \\) A与B的交集，A交B Intersection   \\cup \\( A \\cup B \\) A与B的并集，A并B Union    Test for MathJax (Tex/LaTeX) \\[ \\lbrace x \\in X \\mid x  \\frac{1}{2} \\rbrace \\]\nWhen \\(a \\ne 0\\) there are two solutions to \\(ax^2 + bx + c = 0\\) and they are \\(x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\\)\nA note for MathJax when using single $ When using the single-dollar delimiters, ”... the cost is $2.50 for the first one, and $2.00 for each additional one ...” would cause the phrase “2.50 for the first one, and” to be treated as mathematics since it falls between dollar signs. For this reason, if you want to use single-dollars for in-line math mode, you must enable that explicitly in your configuration:\n\u0026lt;script type=\u0026quot;text/x-mathjax-config\u0026quot;\u0026gt; MathJax.Hub.Config({ tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]} }); \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; async src=\u0026quot;path-to-mathjax/MathJax.js?config=TeX-AMS_CHTML\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  There has been an extensive discussion on this topic, see more details in this page.\n"
},
{
	"uri": "https://halalchain.github.io/docs/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://halalchain.github.io/docs/en/",
	"title": "Qitmeer docs",
	"tags": [],
	"description": "",
	"content": " Qitmeer docs The Qitmeer/HLC documentation \u0026amp; guides and tutorials.\nDocument List  Introduction Getting Started Tutorials Commands Reference  Qx Tools Qitmeer-cli  Frequently Asked Questions Glossary  "
},
{
	"uri": "https://halalchain.github.io/docs/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]